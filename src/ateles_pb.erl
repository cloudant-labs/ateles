%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(ateles_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type create_context_request() ::
      #{context_id              => iodata()         % = 1
       }.

-type create_context_response() ::
      #{
       }.

-type add_map_funs_request() ::
      #{context_id              => iodata(),        % = 1
        lib                     => iodata(),        % = 2
        map_funs                => [iodata()]       % = 3
       }.

-type add_map_funs_response() ::
      #{
       }.

-type map_docs_request() ::
      #{context_id              => iodata(),        % = 1
        map_id                  => iodata(),        % = 2
        doc                     => iodata()         % = 3
       }.

-type map_docs_response() ::
      #{ok                      => boolean() | 0 | 1, % = 1
        map_id                  => iodata(),        % = 2
        result                  => iodata()         % = 3
       }.

-export_type(['create_context_request'/0, 'create_context_response'/0, 'add_map_funs_request'/0, 'add_map_funs_response'/0, 'map_docs_request'/0, 'map_docs_response'/0]).

-spec encode_msg(create_context_request() | create_context_response() | add_map_funs_request() | add_map_funs_response() | map_docs_request() | map_docs_response(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(create_context_request() | create_context_response() | add_map_funs_request() | add_map_funs_response() | map_docs_request() | map_docs_response(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      create_context_request ->
	  encode_msg_create_context_request(id(Msg, TrUserData),
					    TrUserData);
      create_context_response ->
	  encode_msg_create_context_response(id(Msg, TrUserData),
					     TrUserData);
      add_map_funs_request ->
	  encode_msg_add_map_funs_request(id(Msg, TrUserData),
					  TrUserData);
      add_map_funs_response ->
	  encode_msg_add_map_funs_response(id(Msg, TrUserData),
					   TrUserData);
      map_docs_request ->
	  encode_msg_map_docs_request(id(Msg, TrUserData),
				      TrUserData);
      map_docs_response ->
	  encode_msg_map_docs_response(id(Msg, TrUserData),
				       TrUserData)
    end.


encode_msg_create_context_request(Msg, TrUserData) ->
    encode_msg_create_context_request(Msg, <<>>,
				      TrUserData).


encode_msg_create_context_request(#{} = M, Bin,
				  TrUserData) ->
    case M of
      #{context_id := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_create_context_response(_Msg, _TrUserData) ->
    <<>>.

encode_msg_add_map_funs_request(Msg, TrUserData) ->
    encode_msg_add_map_funs_request(Msg, <<>>, TrUserData).


encode_msg_add_map_funs_request(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{context_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{lib := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{map_funs := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_add_map_funs_request_map_funs(TrF3, B2,
						       TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_add_map_funs_response(_Msg, _TrUserData) ->
    <<>>.

encode_msg_map_docs_request(Msg, TrUserData) ->
    encode_msg_map_docs_request(Msg, <<>>, TrUserData).


encode_msg_map_docs_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{context_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{map_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{doc := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case is_empty_string(TrF3) of
	      true -> B2;
	      false ->
		  e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_map_docs_response(Msg, TrUserData) ->
    encode_msg_map_docs_response(Msg, <<>>, TrUserData).


encode_msg_map_docs_response(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{ok := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= false -> Bin;
		    true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{map_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{result := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case is_empty_string(TrF3) of
	      true -> B2;
	      false ->
		  e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

e_field_add_map_funs_request_map_funs([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_add_map_funs_request_map_funs(Rest, Bin3,
					  TrUserData);
e_field_add_map_funs_request_map_funs([], Bin,
				      _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(create_context_request, Bin,
		  TrUserData) ->
    id(decode_msg_create_context_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(create_context_response, Bin,
		  TrUserData) ->
    id(decode_msg_create_context_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(add_map_funs_request, Bin,
		  TrUserData) ->
    id(decode_msg_add_map_funs_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(add_map_funs_response, Bin,
		  TrUserData) ->
    id(decode_msg_add_map_funs_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(map_docs_request, Bin, TrUserData) ->
    id(decode_msg_map_docs_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(map_docs_response, Bin, TrUserData) ->
    id(decode_msg_map_docs_response(Bin, TrUserData),
       TrUserData).



decode_msg_create_context_request(Bin, TrUserData) ->
    dfp_read_field_def_create_context_request(Bin, 0, 0,
					      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_create_context_request(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_create_context_request_context_id(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_create_context_request(<<>>, 0, 0,
					  F@_1, _) ->
    #{context_id => F@_1};
dfp_read_field_def_create_context_request(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_create_context_request(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_create_context_request(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_context_request(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_create_context_request(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_create_context_request_context_id(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_create_context_request(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_create_context_request(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_create_context_request(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_create_context_request(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_create_context_request(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_create_context_request(<<>>, 0, 0,
					 F@_1, _) ->
    #{context_id => F@_1}.

d_field_create_context_request_context_id(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_create_context_request_context_id(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_create_context_request_context_id(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_create_context_request(RestF, 0, 0,
					      NewFValue, TrUserData).

skip_varint_create_context_request(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_create_context_request(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_create_context_request(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_create_context_request(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_create_context_request(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_context_request(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_create_context_request(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_context_request(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_create_context_request(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_context_request(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_create_context_request(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_create_context_request(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_create_context_request(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_create_context_request(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_create_context_response(Bin, TrUserData) ->
    dfp_read_field_def_create_context_response(Bin, 0, 0,
					       TrUserData).

dfp_read_field_def_create_context_response(<<>>, 0, 0,
					   _) ->
    #{};
dfp_read_field_def_create_context_response(Other, Z1,
					   Z2, TrUserData) ->
    dg_read_field_def_create_context_response(Other, Z1, Z2,
					      TrUserData).

dg_read_field_def_create_context_response(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_context_response(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
dg_read_field_def_create_context_response(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_create_context_response(Rest, 0, 0,
					      TrUserData);
      1 ->
	  skip_64_create_context_response(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_create_context_response(Rest, 0,
							0, TrUserData);
      3 ->
	  skip_group_create_context_response(Rest, Key bsr 3, 0,
					     TrUserData);
      5 ->
	  skip_32_create_context_response(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_create_context_response(<<>>, 0, 0,
					  _) ->
    #{}.

skip_varint_create_context_response(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    skip_varint_create_context_response(Rest, Z1, Z2,
					TrUserData);
skip_varint_create_context_response(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_create_context_response(Rest, Z1, Z2,
					       TrUserData).

skip_length_delimited_create_context_response(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_context_response(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
skip_length_delimited_create_context_response(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_context_response(Rest2, 0, 0,
					       TrUserData).

skip_group_create_context_response(Bin, FNum, Z2,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_context_response(Rest, 0, Z2,
					       TrUserData).

skip_32_create_context_response(<<_:32, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_create_context_response(Rest, Z1, Z2,
					       TrUserData).

skip_64_create_context_response(<<_:64, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_create_context_response(Rest, Z1, Z2,
					       TrUserData).

decode_msg_add_map_funs_request(Bin, TrUserData) ->
    dfp_read_field_def_add_map_funs_request(Bin, 0, 0,
					    id(<<>>, TrUserData),
					    id(<<>>, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_add_map_funs_request(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_add_map_funs_request_context_id(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_add_map_funs_request(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_add_map_funs_request_lib(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_add_map_funs_request(<<26,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_add_map_funs_request_map_funs(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_add_map_funs_request(<<>>, 0, 0,
					F@_1, F@_2, R1, TrUserData) ->
    #{context_id => F@_1, lib => F@_2,
      map_funs => lists_reverse(R1, TrUserData)};
dfp_read_field_def_add_map_funs_request(Other, Z1, Z2,
					F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_add_map_funs_request(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_add_map_funs_request(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_add_map_funs_request(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
dg_read_field_def_add_map_funs_request(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_add_map_funs_request_context_id(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      18 ->
	  d_field_add_map_funs_request_lib(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      26 ->
	  d_field_add_map_funs_request_map_funs(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_add_map_funs_request(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    1 ->
		skip_64_add_map_funs_request(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    2 ->
		skip_length_delimited_add_map_funs_request(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   TrUserData);
	    3 ->
		skip_group_add_map_funs_request(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_add_map_funs_request(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData)
	  end
    end;
dg_read_field_def_add_map_funs_request(<<>>, 0, 0, F@_1,
				       F@_2, R1, TrUserData) ->
    #{context_id => F@_1, lib => F@_2,
      map_funs => lists_reverse(R1, TrUserData)}.

d_field_add_map_funs_request_context_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_add_map_funs_request_context_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
d_field_add_map_funs_request_context_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_add_map_funs_request(RestF, 0, 0,
					    NewFValue, F@_2, F@_3, TrUserData).

d_field_add_map_funs_request_lib(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_add_map_funs_request_lib(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_add_map_funs_request_lib(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_add_map_funs_request(RestF, 0, 0,
					    F@_1, NewFValue, F@_3, TrUserData).

d_field_add_map_funs_request_map_funs(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_add_map_funs_request_map_funs(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_add_map_funs_request_map_funs(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_add_map_funs_request(RestF, 0, 0,
					    F@_1, F@_2,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_add_map_funs_request(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_add_map_funs_request(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
skip_varint_add_map_funs_request(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_add_map_funs_request(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_add_map_funs_request(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_add_map_funs_request(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
skip_length_delimited_add_map_funs_request(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_map_funs_request(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, TrUserData).

skip_group_add_map_funs_request(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_map_funs_request(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_32_add_map_funs_request(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_add_map_funs_request(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_64_add_map_funs_request(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_add_map_funs_request(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

decode_msg_add_map_funs_response(Bin, TrUserData) ->
    dfp_read_field_def_add_map_funs_response(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_add_map_funs_response(<<>>, 0, 0,
					 _) ->
    #{};
dfp_read_field_def_add_map_funs_response(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_add_map_funs_response(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_add_map_funs_response(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_add_map_funs_response(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_add_map_funs_response(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_add_map_funs_response(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_add_map_funs_response(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_add_map_funs_response(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_add_map_funs_response(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_add_map_funs_response(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_add_map_funs_response(<<>>, 0, 0,
					_) ->
    #{}.

skip_varint_add_map_funs_response(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_add_map_funs_response(Rest, Z1, Z2,
				      TrUserData);
skip_varint_add_map_funs_response(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_add_map_funs_response(Rest, Z1, Z2,
					     TrUserData).

skip_length_delimited_add_map_funs_response(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_add_map_funs_response(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_add_map_funs_response(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_map_funs_response(Rest2, 0, 0,
					     TrUserData).

skip_group_add_map_funs_response(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_map_funs_response(Rest, 0, Z2,
					     TrUserData).

skip_32_add_map_funs_response(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_add_map_funs_response(Rest, Z1, Z2,
					     TrUserData).

skip_64_add_map_funs_response(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_add_map_funs_response(Rest, Z1, Z2,
					     TrUserData).

decode_msg_map_docs_request(Bin, TrUserData) ->
    dfp_read_field_def_map_docs_request(Bin, 0, 0,
					id(<<>>, TrUserData),
					id(<<>>, TrUserData),
					id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_map_docs_request(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_map_docs_request_context_id(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_map_docs_request(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_map_docs_request_map_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_map_docs_request(<<26, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_map_docs_request_doc(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_map_docs_request(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    #{context_id => F@_1, map_id => F@_2, doc => F@_3};
dfp_read_field_def_map_docs_request(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    dg_read_field_def_map_docs_request(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

dg_read_field_def_map_docs_request(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_map_docs_request(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
dg_read_field_def_map_docs_request(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_map_docs_request_context_id(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      18 ->
	  d_field_map_docs_request_map_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      26 ->
	  d_field_map_docs_request_doc(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_map_docs_request(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    1 ->
		skip_64_map_docs_request(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    2 ->
		skip_length_delimited_map_docs_request(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_map_docs_request(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_map_docs_request(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData)
	  end
    end;
dg_read_field_def_map_docs_request(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, _) ->
    #{context_id => F@_1, map_id => F@_2, doc => F@_3}.

d_field_map_docs_request_context_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_map_docs_request_context_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_map_docs_request_context_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_map_docs_request(RestF, 0, 0,
					NewFValue, F@_2, F@_3, TrUserData).

d_field_map_docs_request_map_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_map_docs_request_map_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_map_docs_request_map_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_map_docs_request(RestF, 0, 0, F@_1,
					NewFValue, F@_3, TrUserData).

d_field_map_docs_request_doc(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_map_docs_request_doc(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_map_docs_request_doc(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_map_docs_request(RestF, 0, 0, F@_1,
					F@_2, NewFValue, TrUserData).

skip_varint_map_docs_request(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_map_docs_request(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
skip_varint_map_docs_request(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_map_docs_request(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_length_delimited_map_docs_request(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_map_docs_request(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
skip_length_delimited_map_docs_request(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_map_docs_request(Rest2, 0, 0, F@_1,
					F@_2, F@_3, TrUserData).

skip_group_map_docs_request(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_map_docs_request(Rest, 0, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_32_map_docs_request(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_map_docs_request(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

skip_64_map_docs_request(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_map_docs_request(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

decode_msg_map_docs_response(Bin, TrUserData) ->
    dfp_read_field_def_map_docs_response(Bin, 0, 0,
					 id(false, TrUserData),
					 id(<<>>, TrUserData),
					 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_map_docs_response(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_map_docs_response_ok(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_map_docs_response(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_map_docs_response_map_id(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_map_docs_response(<<26,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_map_docs_response_result(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_map_docs_response(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #{ok => F@_1, map_id => F@_2, result => F@_3};
dfp_read_field_def_map_docs_response(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_map_docs_response(Other, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

dg_read_field_def_map_docs_response(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_map_docs_response(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
dg_read_field_def_map_docs_response(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_map_docs_response_ok(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      18 ->
	  d_field_map_docs_response_map_id(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      26 ->
	  d_field_map_docs_response_result(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_map_docs_response(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    1 ->
		skip_64_map_docs_response(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    2 ->
		skip_length_delimited_map_docs_response(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    3 ->
		skip_group_map_docs_response(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_map_docs_response(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData)
	  end
    end;
dg_read_field_def_map_docs_response(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    #{ok => F@_1, map_id => F@_2, result => F@_3}.

d_field_map_docs_response_ok(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_map_docs_response_ok(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_map_docs_response_ok(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_map_docs_response(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, TrUserData).

d_field_map_docs_response_map_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_map_docs_response_map_id(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_map_docs_response_map_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_map_docs_response(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, TrUserData).

d_field_map_docs_response_result(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_map_docs_response_result(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_map_docs_response_result(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_map_docs_response(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, TrUserData).

skip_varint_map_docs_response(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_map_docs_response(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
skip_varint_map_docs_response(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_map_docs_response(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_length_delimited_map_docs_response(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_map_docs_response(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
skip_length_delimited_map_docs_response(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_map_docs_response(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, TrUserData).

skip_group_map_docs_response(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_map_docs_response(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_32_map_docs_response(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_map_docs_response(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_64_map_docs_response(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_map_docs_response(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      create_context_request ->
	  merge_msg_create_context_request(Prev, New, TrUserData);
      create_context_response ->
	  merge_msg_create_context_response(Prev, New,
					    TrUserData);
      add_map_funs_request ->
	  merge_msg_add_map_funs_request(Prev, New, TrUserData);
      add_map_funs_response ->
	  merge_msg_add_map_funs_response(Prev, New, TrUserData);
      map_docs_request ->
	  merge_msg_map_docs_request(Prev, New, TrUserData);
      map_docs_response ->
	  merge_msg_map_docs_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_create_context_request/3}).
merge_msg_create_context_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{context_id := NFcontext_id}} ->
	  S1#{context_id => NFcontext_id};
      {#{context_id := PFcontext_id}, _} ->
	  S1#{context_id => PFcontext_id};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_create_context_response/3}).
merge_msg_create_context_response(_Prev, New,
				  _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_add_map_funs_request/3}).
merge_msg_add_map_funs_request(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{context_id := NFcontext_id}} ->
	       S1#{context_id => NFcontext_id};
	   {#{context_id := PFcontext_id}, _} ->
	       S1#{context_id => PFcontext_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{lib := NFlib}} -> S2#{lib => NFlib};
	   {#{lib := PFlib}, _} -> S2#{lib => PFlib};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{map_funs := PFmap_funs},
       #{map_funs := NFmap_funs}} ->
	  S3#{map_funs =>
		  'erlang_++'(PFmap_funs, NFmap_funs, TrUserData)};
      {_, #{map_funs := NFmap_funs}} ->
	  S3#{map_funs => NFmap_funs};
      {#{map_funs := PFmap_funs}, _} ->
	  S3#{map_funs => PFmap_funs};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_add_map_funs_response/3}).
merge_msg_add_map_funs_response(_Prev, New,
				_TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_map_docs_request/3}).
merge_msg_map_docs_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{context_id := NFcontext_id}} ->
	       S1#{context_id => NFcontext_id};
	   {#{context_id := PFcontext_id}, _} ->
	       S1#{context_id => PFcontext_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{map_id := NFmap_id}} -> S2#{map_id => NFmap_id};
	   {#{map_id := PFmap_id}, _} -> S2#{map_id => PFmap_id};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{doc := NFdoc}} -> S3#{doc => NFdoc};
      {#{doc := PFdoc}, _} -> S3#{doc => PFdoc};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_map_docs_response/3}).
merge_msg_map_docs_response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{ok := NFok}} -> S1#{ok => NFok};
	   {#{ok := PFok}, _} -> S1#{ok => PFok};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{map_id := NFmap_id}} -> S2#{map_id => NFmap_id};
	   {#{map_id := PFmap_id}, _} -> S2#{map_id => PFmap_id};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{result := NFresult}} -> S3#{result => NFresult};
      {#{result := PFresult}, _} -> S3#{result => PFresult};
      _ -> S3
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      create_context_request ->
	  v_msg_create_context_request(Msg, [MsgName],
				       TrUserData);
      create_context_response ->
	  v_msg_create_context_response(Msg, [MsgName],
					TrUserData);
      add_map_funs_request ->
	  v_msg_add_map_funs_request(Msg, [MsgName], TrUserData);
      add_map_funs_response ->
	  v_msg_add_map_funs_response(Msg, [MsgName], TrUserData);
      map_docs_request ->
	  v_msg_map_docs_request(Msg, [MsgName], TrUserData);
      map_docs_response ->
	  v_msg_map_docs_response(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_create_context_request/3}).
-dialyzer({nowarn_function,v_msg_create_context_request/3}).
v_msg_create_context_request(#{} = M, Path,
			     TrUserData) ->
    case M of
      #{context_id := F1} ->
	  v_type_string(F1, [context_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (context_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_create_context_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   create_context_request},
		  M, Path);
v_msg_create_context_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, create_context_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_create_context_response/3}).
-dialyzer({nowarn_function,v_msg_create_context_response/3}).
v_msg_create_context_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_create_context_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   create_context_response},
		  M, Path);
v_msg_create_context_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, create_context_response},
		  X, Path).

-compile({nowarn_unused_function,v_msg_add_map_funs_request/3}).
-dialyzer({nowarn_function,v_msg_add_map_funs_request/3}).
v_msg_add_map_funs_request(#{} = M, Path, TrUserData) ->
    case M of
      #{context_id := F1} ->
	  v_type_string(F1, [context_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{lib := F2} ->
	  v_type_string(F2, [lib | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{map_funs := F3} ->
	  if is_list(F3) ->
		 _ = [v_type_string(Elem, [map_funs | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F3,
			       [map_funs | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (context_id) -> ok;
		      (lib) -> ok;
		      (map_funs) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_add_map_funs_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   add_map_funs_request},
		  M, Path);
v_msg_add_map_funs_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, add_map_funs_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_add_map_funs_response/3}).
-dialyzer({nowarn_function,v_msg_add_map_funs_response/3}).
v_msg_add_map_funs_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_add_map_funs_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   add_map_funs_response},
		  M, Path);
v_msg_add_map_funs_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, add_map_funs_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_map_docs_request/3}).
-dialyzer({nowarn_function,v_msg_map_docs_request/3}).
v_msg_map_docs_request(#{} = M, Path, TrUserData) ->
    case M of
      #{context_id := F1} ->
	  v_type_string(F1, [context_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{map_id := F2} ->
	  v_type_string(F2, [map_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{doc := F3} ->
	  v_type_string(F3, [doc | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (context_id) -> ok;
		      (map_id) -> ok;
		      (doc) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_map_docs_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   map_docs_request},
		  M, Path);
v_msg_map_docs_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, map_docs_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_map_docs_response/3}).
-dialyzer({nowarn_function,v_msg_map_docs_response/3}).
v_msg_map_docs_response(#{} = M, Path, TrUserData) ->
    case M of
      #{ok := F1} -> v_type_bool(F1, [ok | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{map_id := F2} ->
	  v_type_string(F2, [map_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{result := F3} ->
	  v_type_string(F3, [result | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (ok) -> ok;
		      (map_id) -> ok;
		      (result) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_map_docs_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   map_docs_response},
		  M, Path);
v_msg_map_docs_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, map_docs_response}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, create_context_request},
      [#{name => context_id, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, create_context_response}, []},
     {{msg, add_map_funs_request},
      [#{name => context_id, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => lib, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => map_funs, fnum => 3, rnum => 4,
	 type => string, occurrence => repeated, opts => []}]},
     {{msg, add_map_funs_response}, []},
     {{msg, map_docs_request},
      [#{name => context_id, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => map_id, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => doc, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, map_docs_response},
      [#{name => ok, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => map_id, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => result, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    [create_context_request, create_context_response,
     add_map_funs_request, add_map_funs_response,
     map_docs_request, map_docs_response].


get_group_names() -> [].


get_msg_or_group_names() ->
    [create_context_request, create_context_response,
     add_map_funs_request, add_map_funs_response,
     map_docs_request, map_docs_response].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(create_context_request) ->
    [#{name => context_id, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []}];
find_msg_def(create_context_response) -> [];
find_msg_def(add_map_funs_request) ->
    [#{name => context_id, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => lib, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => map_funs, fnum => 3, rnum => 4,
       type => string, occurrence => repeated, opts => []}];
find_msg_def(add_map_funs_response) -> [];
find_msg_def(map_docs_request) ->
    [#{name => context_id, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => map_id, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => doc, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []}];
find_msg_def(map_docs_response) ->
    [#{name => ok, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => map_id, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => result, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['ateles.Ateles'].


get_service_def('ateles.Ateles') ->
    {{service, 'ateles.Ateles'},
     [#{name => 'CreateContext',
	input => create_context_request,
	output => create_context_response,
	input_stream => false, output_stream => false,
	opts => []},
      #{name => 'AddMapFuns', input => add_map_funs_request,
	output => add_map_funs_response, input_stream => false,
	output_stream => false, opts => []},
      #{name => 'MapDocs', input => map_docs_request,
	output => map_docs_response, input_stream => true,
	output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('ateles.Ateles') ->
    ['CreateContext', 'AddMapFuns', 'MapDocs'];
get_rpc_names(_) -> error.


find_rpc_def('ateles.Ateles', RpcName) ->
    'find_rpc_def_ateles.Ateles'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_ateles.Ateles'('CreateContext') ->
    #{name => 'CreateContext',
      input => create_context_request,
      output => create_context_response,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_ateles.Ateles'('AddMapFuns') ->
    #{name => 'AddMapFuns', input => add_map_funs_request,
      output => add_map_funs_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_ateles.Ateles'('MapDocs') ->
    #{name => 'MapDocs', input => map_docs_request,
      output => map_docs_response, input_stream => true,
      output_stream => true, opts => []};
'find_rpc_def_ateles.Ateles'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"ateles.Ateles">>) -> 'ateles.Ateles';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('ateles.Ateles') -> <<"ateles.Ateles">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"ateles.Ateles">>, <<"CreateContext">>) ->
    {'ateles.Ateles', 'CreateContext'};
fqbins_to_service_and_rpc_name(<<"ateles.Ateles">>, <<"AddMapFuns">>) ->
    {'ateles.Ateles', 'AddMapFuns'};
fqbins_to_service_and_rpc_name(<<"ateles.Ateles">>, <<"MapDocs">>) ->
    {'ateles.Ateles', 'MapDocs'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('ateles.Ateles',
			       'CreateContext') ->
    {<<"ateles.Ateles">>, <<"CreateContext">>};
service_and_rpc_name_to_fqbins('ateles.Ateles',
			       'AddMapFuns') ->
    {<<"ateles.Ateles">>, <<"AddMapFuns">>};
service_and_rpc_name_to_fqbins('ateles.Ateles',
			       'MapDocs') ->
    {<<"ateles.Ateles">>, <<"MapDocs">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ateles.CreateContextRequest">>) -> create_context_request;
fqbin_to_msg_name(<<"ateles.CreateContextResponse">>) -> create_context_response;
fqbin_to_msg_name(<<"ateles.AddMapFunsRequest">>) -> add_map_funs_request;
fqbin_to_msg_name(<<"ateles.AddMapFunsResponse">>) -> add_map_funs_response;
fqbin_to_msg_name(<<"ateles.MapDocsRequest">>) -> map_docs_request;
fqbin_to_msg_name(<<"ateles.MapDocsResponse">>) -> map_docs_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(create_context_request) -> <<"ateles.CreateContextRequest">>;
msg_name_to_fqbin(create_context_response) -> <<"ateles.CreateContextResponse">>;
msg_name_to_fqbin(add_map_funs_request) -> <<"ateles.AddMapFunsRequest">>;
msg_name_to_fqbin(add_map_funs_response) -> <<"ateles.AddMapFunsResponse">>;
msg_name_to_fqbin(map_docs_request) -> <<"ateles.MapDocsRequest">>;
msg_name_to_fqbin(map_docs_response) -> <<"ateles.MapDocsResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> ateles.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "ateles.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["ateles.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["ateles"].


get_msg_containment("ateles") ->
    [add_map_funs_request, add_map_funs_response,
     create_context_request, create_context_response,
     map_docs_request, map_docs_response];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("ateles") -> ateles;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("ateles") -> ['ateles.Ateles'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("ateles") ->
    [{'ateles.Ateles', 'CreateContext'},
     {'ateles.Ateles', 'AddMapFuns'},
     {'ateles.Ateles', 'MapDocs'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("ateles") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"ateles.MapDocsRequest">>) -> "ateles";
get_proto_by_msg_name_as_fqbin(<<"ateles.CreateContextRequest">>) -> "ateles";
get_proto_by_msg_name_as_fqbin(<<"ateles.AddMapFunsRequest">>) -> "ateles";
get_proto_by_msg_name_as_fqbin(<<"ateles.MapDocsResponse">>) -> "ateles";
get_proto_by_msg_name_as_fqbin(<<"ateles.CreateContextResponse">>) -> "ateles";
get_proto_by_msg_name_as_fqbin(<<"ateles.AddMapFunsResponse">>) -> "ateles";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"ateles.Ateles">>) -> "ateles";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"ateles">>) -> ["ateles"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4,7,3].
